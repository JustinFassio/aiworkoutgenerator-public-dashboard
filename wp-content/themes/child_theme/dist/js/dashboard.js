!function(){"use strict";var e={63:function(e,t,a){a.d(t,{W:function(){return r}});var s=a(454);const r=new class{constructor(){this.initialized=!1}init(){this.initialized||(this.bindEvents(),this.initializeAttendanceCalendar(),this.loadAttendanceStats(),this.initialized=!0)}bindEvents(){document.addEventListener("click",(e=>{e.target.matches(".record-attendance-btn")&&this.handleRecordAttendance(e)})),document.addEventListener("change",(e=>{e.target.matches(".attendance-period-selector")&&this.handlePeriodChange(e)}))}initializeAttendanceCalendar(){const e=new Date,t=new Date(e.getFullYear(),e.getMonth(),1),a=new Date(e.getFullYear(),e.getMonth()+1,0);this.loadAttendanceData(t,a)}async loadAttendanceData(e,t){const a=document.getElementById("attendance-calendar-container");if(!a)return;const r=s.UI.showLoading(a);try{const s=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_attendance",nonce:window.athleteDashboard.nonce,start_date:this.formatDate(e),end_date:this.formatDate(t)})}),r=await s.json();r.success?this.renderAttendanceCalendar(r.data):this.showMessage("Error loading attendance data. Please try again.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Attendance data loading error:",e)}finally{s.UI.hideLoading(r)}}async loadAttendanceStats(){const e=document.getElementById("attendance-stats-container");if(!e)return;const t=s.UI.showLoading(e);try{const t=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_attendance_stats",nonce:window.athleteDashboard.nonce})}),a=await t.json();a.success?this.updateAttendanceStats(a.data):this.showMessage("Error loading attendance stats. Please try again.","error",e)}catch(t){this.showMessage("Server error. Please try again later.","error",e),console.error("Attendance stats loading error:",t)}finally{s.UI.hideLoading(t)}}async handleRecordAttendance(e){e.preventDefault();const t=e.target.dataset.date,a=e.target.closest(".attendance-container");if(!a)return;const r=s.UI.showLoading(a);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"record_attendance",nonce:window.athleteDashboard.nonce,date:t})}),s=await e.json();s.success?(this.showMessage("Attendance recorded successfully!","success",a),await this.initializeAttendanceCalendar(),await this.loadAttendanceStats()):this.showMessage(s.data?.message||"Error recording attendance. Please try again.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Attendance recording error:",e)}finally{s.UI.hideLoading(r)}}handlePeriodChange(e){const t=e.target.value,a=this.getPeriodDates(t);this.loadAttendanceData(a.start,a.end)}getPeriodDates(e){const t=new Date;let a,s;switch(e){case"week":a=new Date(t.setDate(t.getDate()-t.getDay())),s=new Date(t.setDate(t.getDate()+6));break;case"month":default:a=new Date(t.getFullYear(),t.getMonth(),1),s=new Date(t.getFullYear(),t.getMonth()+1,0);break;case"year":a=new Date(t.getFullYear(),0,1),s=new Date(t.getFullYear(),11,31)}return{start:a,end:s}}renderAttendanceCalendar(e){const t=document.getElementById("attendance-calendar");t&&(t.innerHTML=e.calendar,e.attended_dates.forEach((e=>{const a=t.querySelector(`[data-date="${e}"]`);a&&a.classList.add("attended")})))}updateAttendanceStats(e){const t={rate:document.getElementById("attendance-rate"),currentStreak:document.getElementById("current-streak"),bestStreak:document.getElementById("best-streak")};t.rate&&(t.rate.textContent=`${e.attendance_rate}%`),t.currentStreak&&(t.currentStreak.textContent=`${e.current_streak} days`),t.bestStreak&&(t.bestStreak.textContent=`${e.best_streak} days`)}formatDate(e){return e.toISOString().split("T")[0]}showMessage(e,t,a){const r=a.querySelector(".attendance-message")||s.UI.createElement("div","attendance-message");r.className=`attendance-message ${t}`,r.textContent=e,r.parentNode||a.insertBefore(r,a.firstChild),setTimeout((()=>{r.classList.add("fade-out"),setTimeout((()=>r.remove()),300)}),3e3)}};document.addEventListener("DOMContentLoaded",(()=>r.init()))},449:function(e,t,a){a.d(t,{G:function(){return r}});var s=a(454);const r=new class{constructor(){this.initialized=!1,this.charts={}}init(){this.initialized||(this.bindEvents(),this.initializeCharts(),this.initialized=!0)}bindEvents(){document.addEventListener("change",(e=>{e.target.matches(".chart-period-selector")&&this.handlePeriodChange(e),e.target.matches(".metric-selector")&&this.handleMetricChange(e)}))}initializeCharts(){this.initializeWorkoutChart(),this.initializeAttendanceChart(),this.initializeGoalsChart(),this.initializeProgressChart()}initializeWorkoutChart(){const e=document.getElementById("workout-chart");e&&(this.charts.workout=new Chart(e,{type:"line",data:{labels:[],datasets:[{label:"Workouts",data:[],borderColor:"rgb(75, 192, 192)",tension:.1}]},options:{responsive:!0,scales:{y:{beginAtZero:!0}}}}),this.loadWorkoutData())}initializeAttendanceChart(){const e=document.getElementById("attendance-chart");e&&(this.charts.attendance=new Chart(e,{type:"bar",data:{labels:[],datasets:[{label:"Attendance",data:[],backgroundColor:"rgba(54, 162, 235, 0.2)",borderColor:"rgb(54, 162, 235)",borderWidth:1}]},options:{responsive:!0,scales:{y:{beginAtZero:!0,max:1,ticks:{stepSize:1}}}}}),this.loadAttendanceData())}initializeGoalsChart(){const e=document.getElementById("goals-chart");e&&(this.charts.goals=new Chart(e,{type:"doughnut",data:{labels:["Completed","In Progress","Not Started"],datasets:[{data:[],backgroundColor:["rgb(75, 192, 192)","rgb(255, 205, 86)","rgb(201, 203, 207)"]}]},options:{responsive:!0,plugins:{legend:{position:"bottom"}}}}),this.loadGoalsData())}initializeProgressChart(){const e=document.getElementById("progress-chart");e&&(this.charts.progress=new Chart(e,{type:"line",data:{labels:[],datasets:[{label:"Progress",data:[],borderColor:"rgb(153, 102, 255)",tension:.1}]},options:{responsive:!0,scales:{y:{beginAtZero:!0}}}}),this.loadProgressData())}async loadWorkoutData(e="30days"){const t=document.getElementById("workout-chart-container");if(!t)return;const a=s.UI.showLoading(t);try{const a=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_workout_stats",nonce:window.athleteDashboard.nonce,period:e})}),s=await a.json();s.success?this.updateWorkoutChart(s.data):this.showMessage("Error loading workout data. Please try again.","error",t)}catch(e){this.showMessage("Server error. Please try again later.","error",t),console.error("Workout data loading error:",e)}finally{s.UI.hideLoading(a)}}async loadAttendanceData(e="30days"){const t=document.getElementById("attendance-chart-container");if(!t)return;const a=s.UI.showLoading(t);try{const a=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_attendance_data",nonce:window.athleteDashboard.nonce,period:e})}),s=await a.json();s.success?this.updateAttendanceChart(s.data):this.showMessage("Error loading attendance data. Please try again.","error",t)}catch(e){this.showMessage("Server error. Please try again later.","error",t),console.error("Attendance data loading error:",e)}finally{s.UI.hideLoading(a)}}async loadGoalsData(){const e=document.getElementById("goals-chart-container");if(!e)return;const t=s.UI.showLoading(e);try{const t=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_goals_data",nonce:window.athleteDashboard.nonce})}),a=await t.json();a.success?this.updateGoalsChart(a.data):this.showMessage("Error loading goals data. Please try again.","error",e)}catch(t){this.showMessage("Server error. Please try again later.","error",e),console.error("Goals data loading error:",t)}finally{s.UI.hideLoading(t)}}async loadProgressData(e="weight"){const t=document.getElementById("progress-chart-container");if(!t)return;const a=s.UI.showLoading(t);try{const a=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_progress_metrics",nonce:window.athleteDashboard.nonce,metric:e})}),s=await a.json();s.success?this.updateProgressChart(s.data):this.showMessage("Error loading progress data. Please try again.","error",t)}catch(e){this.showMessage("Server error. Please try again later.","error",t),console.error("Progress data loading error:",e)}finally{s.UI.hideLoading(a)}}updateWorkoutChart(e){if(!this.charts.workout)return;this.charts.workout.data.labels=e.labels,this.charts.workout.data.datasets[0].data=e.datasets[0].data,this.charts.workout.update();const t={totalWorkouts:document.getElementById("total-workouts"),avgDuration:document.getElementById("avg-duration"),totalCalories:document.getElementById("total-calories")};t.totalWorkouts&&(t.totalWorkouts.textContent=e.total_workouts),t.avgDuration&&(t.avgDuration.textContent=`${e.avg_duration} min`),t.totalCalories&&(t.totalCalories.textContent=`${e.total_calories} kcal`)}updateAttendanceChart(e){if(!this.charts.attendance)return;this.charts.attendance.data.labels=e.labels,this.charts.attendance.data.datasets[0].data=e.datasets[0].data,this.charts.attendance.update();const t={rate:document.getElementById("attendance-rate"),currentStreak:document.getElementById("current-streak"),bestStreak:document.getElementById("best-streak")};t.rate&&(t.rate.textContent=`${e.attendance_rate}%`),t.currentStreak&&(t.currentStreak.textContent=`${e.current_streak} days`),t.bestStreak&&(t.bestStreak.textContent=`${e.best_streak} days`)}updateGoalsChart(e){if(!this.charts.goals)return;this.charts.goals.data.datasets[0].data=[e.completed,e.in_progress,e.not_started],this.charts.goals.update();const t=document.getElementById("goals-completion-rate");if(t){const a=e.completed+e.in_progress+e.not_started,s=a>0?Math.round(e.completed/a*100):0;t.textContent=`${s}%`}}updateProgressChart(e){if(!this.charts.progress)return;this.charts.progress.data.labels=e.labels,this.charts.progress.data.datasets[0].data=e.datasets[0].data,this.charts.progress.data.datasets[0].label=e.metric_label,this.charts.progress.options.scales.y.title={display:!0,text:e.metric_unit},this.charts.progress.update();const t={current:document.getElementById("current-value"),change:document.getElementById("total-change"),trend:document.getElementById("trend-indicator")};if(t.current&&(t.current.textContent=`${e.current_value} ${e.metric_unit}`),t.change){const a=e.total_change,s=a>0?"+":"";t.change.textContent=`${s}${a} ${e.metric_unit}`,t.change.className="change-value "+(a>0?"positive":"negative")}t.trend&&(t.trend.className=`trend-indicator ${e.trend}`,t.trend.setAttribute("aria-label",`Trend: ${e.trend}`))}handlePeriodChange(e){const t=e.target.value,a=e.target.dataset.chartType;switch(a){case"workout":this.loadWorkoutData(t);break;case"attendance":this.loadAttendanceData(t);break;default:console.warn("Unknown chart type:",a)}}handleMetricChange(e){const t=e.target.value;this.loadProgressData(t)}showMessage(e,t,a){const r=a.querySelector(".chart-message")||s.UI.createElement("div","chart-message");r.className=`chart-message ${t}`,r.textContent=e,r.parentNode||a.insertBefore(r,a.firstChild),setTimeout((()=>{r.classList.add("fade-out"),setTimeout((()=>r.remove()),300)}),3e3)}destroy(){Object.values(this.charts).forEach((e=>{e&&"function"==typeof e.destroy&&e.destroy()})),this.charts={}}};document.addEventListener("DOMContentLoaded",(()=>r.init()))},274:function(e,t,a){a.d(t,{n:function(){return r}});var s=a(454);const r=new class{constructor(){this.initialized=!1}init(){this.initialized||(this.bindEvents(),this.initializeGoalForms(),this.loadActiveGoals(),this.initialized=!0)}bindEvents(){document.addEventListener("submit",(e=>{e.target.matches(".goal-form")&&this.handleGoalSubmit(e)})),document.addEventListener("click",(e=>{e.target.matches(".update-progress-btn")&&this.handleProgressUpdate(e),e.target.matches(".delete-goal-btn")&&this.handleGoalDelete(e)})),document.addEventListener("input",(e=>{e.target.matches(".progress-range")&&this.updateProgressDisplay(e.target)}))}initializeGoalForms(){document.querySelectorAll(".goal-deadline").forEach((e=>{e.type="date";const t=(new Date).toISOString().split("T")[0];e.min=t})),document.querySelectorAll(".progress-range").forEach((e=>{e.type="range",e.min=0,e.max=100,e.value=e.dataset.progress||0,this.updateProgressDisplay(e)}))}updateProgressDisplay(e){const t=e.nextElementSibling;t&&t.classList.contains("progress-value")&&(t.textContent=`${e.value}%`)}async loadActiveGoals(){const e=document.getElementById("active-goals-container");if(!e)return;const t=s.UI.showLoading(e);try{const t=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_active_goals",nonce:window.athleteDashboard.nonce})}),a=await t.json();a.success?(e.innerHTML=a.data.goals,this.initializeGoalForms()):this.showMessage("Error loading goals. Please try again.","error",e)}catch(t){this.showMessage("Server error. Please try again later.","error",e),console.error("Goals loading error:",t)}finally{s.UI.hideLoading(t)}}async handleGoalSubmit(e){e.preventDefault();const t=e.target,a=new FormData(t),r=t.closest(".goals-container"),n=s.UI.showLoading(r);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"save_goal",nonce:window.athleteDashboard.nonce,goal_data:JSON.stringify(Object.fromEntries(a))})}),s=await e.json();s.success?(this.showMessage("Goal saved successfully!","success",r),await this.loadActiveGoals(),t.reset()):this.showMessage(s.data?.message||"Error saving goal. Please try again.","error",r)}catch(e){this.showMessage("Server error. Please try again later.","error",r),console.error("Goal submission error:",e)}finally{s.UI.hideLoading(n)}}async handleProgressUpdate(e){e.preventDefault();const t=e.target.dataset.goalId,a=e.target.closest(".goal-item"),r=a.querySelector(".progress-range");if(!a||!r)return;const n=s.UI.showLoading(a);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"update_goal_progress",nonce:window.athleteDashboard.nonce,goal_id:t,progress:r.value})}),s=await e.json();s.success?(this.showMessage("Progress updated successfully!","success",a),await this.loadActiveGoals()):this.showMessage(s.data?.message||"Error updating progress. Please try again.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Progress update error:",e)}finally{s.UI.hideLoading(n)}}async handleGoalDelete(e){if(e.preventDefault(),!confirm("Are you sure you want to delete this goal?"))return;const t=e.target.dataset.goalId,a=e.target.closest(".goal-item");if(!a)return;const r=s.UI.showLoading(a);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"delete_goal",nonce:window.athleteDashboard.nonce,goal_id:t})}),s=await e.json();s.success?(this.showMessage("Goal deleted successfully!","success",a),await this.loadActiveGoals()):this.showMessage(s.data?.message||"Error deleting goal. Please try again.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Goal deletion error:",e)}finally{s.UI.hideLoading(r)}}showMessage(e,t,a){const r=a.querySelector(".goals-message")||s.UI.createElement("div","goals-message");r.className=`goals-message ${t}`,r.textContent=e,r.parentNode||a.insertBefore(r,a.firstChild),setTimeout((()=>{r.classList.add("fade-out"),setTimeout((()=>r.remove()),300)}),3e3)}};document.addEventListener("DOMContentLoaded",(()=>r.init()))},660:function(e,t,a){a.d(t,{D:function(){return r}});var s=a(454);const r=new class{constructor(){this.initialized=!1,this.stripeCard=null}init(){this.initialized||(this.bindEvents(),this.loadMembershipDetails(),this.initializeSubscriptionForms(),this.initialized=!0)}bindEvents(){document.addEventListener("click",(e=>{e.target.matches(".upgrade-plan-btn")&&this.handleUpgradePlan(e),e.target.matches(".renew-membership-btn")&&this.handleRenewal(e)})),document.addEventListener("submit",(e=>{e.target.matches(".payment-form")&&this.handlePaymentSubmit(e)}))}async loadMembershipDetails(){const e=document.getElementById("membership-details-container");if(!e)return;const t=s.UI.showLoading(e);try{const t=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_membership",nonce:window.athleteDashboard.nonce})}),a=await t.json();a.success?this.updateMembershipUI(a.data):this.showMessage("Error loading membership details. Please try again.","error",e)}catch(t){this.showMessage("Server error. Please try again later.","error",e),console.error("Membership details loading error:",t)}finally{s.UI.hideLoading(t)}}initializeSubscriptionForms(){"undefined"!=typeof Stripe&&this.initializeStripe(),document.querySelectorAll(".plan-selector").forEach((e=>{e.addEventListener("change",(e=>{const t=e.target.options[e.target.selectedIndex],a=JSON.parse(t.dataset.plan||"{}");this.updatePlanDetails(a)}))}))}initializeStripe(){if(!document.getElementById("card-element"))return;const e=Stripe(window.athleteDashboard.stripe_key).elements().create("card");e.mount("#card-element"),e.addEventListener("change",(e=>{const t=document.getElementById("card-errors");t&&(t.textContent=e.error?e.error.message:"")})),this.stripeCard=e}async handleUpgradePlan(e){e.preventDefault();const t=e.target.dataset.planId,a=document.getElementById("upgrade-form-container");if(!a)return;const r=s.UI.showLoading(a);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_upgrade_form",nonce:window.athleteDashboard.nonce,plan_id:t})}),s=await e.json();s.success?(a.innerHTML=s.data.form,this.initializeSubscriptionForms()):this.showMessage(s.data?.message||"Error loading upgrade form.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Upgrade form loading error:",e)}finally{s.UI.hideLoading(r)}}async handleRenewal(e){e.preventDefault();const t=e.target.dataset.membershipId,a=e.target.closest(".membership-container");if(!a)return;const r=s.UI.showLoading(a);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"process_renewal",nonce:window.athleteDashboard.nonce,membership_id:t})}),s=await e.json();s.success?(this.showMessage("Membership renewed successfully!","success",a),await this.loadMembershipDetails()):this.showMessage(s.data?.message||"Error renewing membership. Please try again.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Membership renewal error:",e)}finally{s.UI.hideLoading(r)}}async handlePaymentSubmit(e){e.preventDefault();const t=e.target,a=t.querySelector('button[type="submit"]'),s=t.closest(".membership-container");if(s){a.disabled=!0;try{this.stripeCard?await this.processStripePayment(t,s):await this.processRegularPayment(t,s)}catch(e){this.showMessage("Payment processing error. Please try again.","error",s),console.error("Payment submission error:",e)}finally{a.disabled=!1}}}async processStripePayment(e,t){const a=Stripe(window.athleteDashboard.stripe_key);try{const s=await a.createToken(this.stripeCard);s.error?this.showMessage(s.error.message,"error",t):await this.submitPaymentForm(e,t,{stripe_token:s.token.id})}catch(e){this.showMessage("Stripe processing error. Please try again.","error",t),console.error("Stripe payment error:",e)}}async processRegularPayment(e,t){await this.submitPaymentForm(e,t,{})}async submitPaymentForm(e,t,a={}){const r=s.UI.showLoading(t),n=new FormData(e);try{const s=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"process_payment",nonce:window.athleteDashboard.nonce,payment_data:JSON.stringify({...Object.fromEntries(n),...a})})}),r=await s.json();r.success?(this.showMessage("Payment processed successfully!","success",t),await this.loadMembershipDetails(),e.reset()):this.showMessage(r.data?.message||"Error processing payment. Please try again.","error",t)}catch(e){this.showMessage("Server error. Please try again later.","error",t),console.error("Payment submission error:",e)}finally{s.UI.hideLoading(r)}}updateMembershipUI(e){const t={status:document.getElementById("membership-status"),type:document.getElementById("membership-type"),expiry:document.getElementById("membership-expiry")};t.status&&(t.status.textContent=e.status),t.type&&(t.type.textContent=e.type),t.expiry&&(t.expiry.textContent=e.expiry_date),e.features.forEach((e=>{document.querySelectorAll(`.feature-${e}`).forEach((e=>{e.classList.remove("disabled"),e.classList.add("active")}))}))}updatePlanDetails(e){const t=document.getElementById("plan-price"),a=document.getElementById("plan-features");t&&(t.textContent=e.price),a&&(a.innerHTML=e.features.map((e=>`<li>${e}</li>`)).join(""))}showMessage(e,t,a){const r=a.querySelector(".membership-message")||s.UI.createElement("div","membership-message");r.className=`membership-message ${t}`,r.textContent=e,r.parentNode||a.insertBefore(r,a.firstChild),setTimeout((()=>{r.classList.add("fade-out"),setTimeout((()=>r.remove()),300)}),3e3)}};document.addEventListener("DOMContentLoaded",(()=>r.init()))},778:function(e,t,a){a.d(t,{T:function(){return r}});var s=a(454);const r=new class{constructor(){this.initialized=!1,this.lastMessageCheck=(new Date).toISOString(),this.pollingInterval=null}init(){this.initialized||(this.bindEvents(),this.initializeMessageForms(),this.loadMessages(),this.startMessagePolling(),this.initialized=!0)}bindEvents(){document.addEventListener("submit",(e=>{e.target.matches(".message-form")&&this.handleMessageSubmit(e)})),document.addEventListener("click",(e=>{e.target.matches(".message-delete-btn")&&this.handleMessageDelete(e),e.target.matches(".message-reply-btn")&&this.handleMessageReply(e),e.target.closest(".message-item")&&this.handleMessageClick(e)}))}async initializeMessageForms(){document.querySelectorAll(".recipient-selector").forEach((e=>{this.initializeRecipientSelector(e)}))}async initializeRecipientSelector(e){const t=s.UI.createElement("div","recipient-dropdown"),a=s.UI.createElement("input","recipient-search");a.type="text",a.placeholder="Search recipients...",t.appendChild(a);const r=s.UI.createElement("div","recipient-results");let n;t.appendChild(r),e.parentNode.replaceChild(t,e),a.addEventListener("input",(()=>{clearTimeout(n),n=setTimeout((()=>this.searchRecipients(a.value,r)),250)}))}async searchRecipients(e,t){if(e)try{const a=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"search_recipients",nonce:window.athleteDashboard.nonce,search:e})}),s=await a.json();s.success&&this.renderRecipientResults(s.data,t)}catch(e){console.error("Recipient search error:",e)}else t.innerHTML=""}renderRecipientResults(e,t){t.innerHTML=e.map((e=>`\n                <div class="recipient-option" data-id="${e.id}">\n                    <img src="${e.avatar}" alt="${e.name}" class="recipient-avatar">\n                    <span>${e.name}</span>\n                </div>\n            `)).join(""),t.querySelectorAll(".recipient-option").forEach((e=>{e.addEventListener("click",(()=>this.selectRecipient(e)))}))}selectRecipient(e){const t=e.closest(".recipient-dropdown"),a=t.querySelector(".recipient-search");a.value=e.querySelector("span").textContent,a.dataset.selectedId=e.dataset.id,t.querySelector(".recipient-results").innerHTML=""}async loadMessages(){const e=document.getElementById("messages-container");if(!e)return;const t=s.UI.showLoading(e);try{const t=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_messages",nonce:window.athleteDashboard.nonce})}),a=await t.json();a.success?this.updateMessagesList(a.data):this.showMessage("Error loading messages. Please try again.","error",e)}catch(t){this.showMessage("Server error. Please try again later.","error",e),console.error("Messages loading error:",t)}finally{s.UI.hideLoading(t)}}startMessagePolling(){this.pollingInterval&&clearInterval(this.pollingInterval),this.pollingInterval=setInterval((()=>this.checkNewMessages()),3e4)}async checkNewMessages(){try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"check_new_messages",nonce:window.athleteDashboard.nonce,last_check:this.lastMessageCheck})}),t=await e.json();t.success&&t.data.has_new&&(await this.loadMessages(),this.showNotification("You have new messages")),this.lastMessageCheck=(new Date).toISOString()}catch(e){console.error("New messages check error:",e)}}async handleMessageSubmit(e){e.preventDefault();const t=e.target,a=t.closest(".messaging-container");if(!a)return;const r=s.UI.showLoading(a),n=new FormData(t);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"send_message",nonce:window.athleteDashboard.nonce,message_data:JSON.stringify(Object.fromEntries(n))})}),s=await e.json();s.success?(this.showMessage("Message sent successfully!","success",a),t.reset(),await this.loadMessages()):this.showMessage(s.data?.message||"Error sending message. Please try again.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Message submission error:",e)}finally{s.UI.hideLoading(r)}}async handleMessageDelete(e){if(e.preventDefault(),!confirm("Are you sure you want to delete this message?"))return;const t=e.target.dataset.messageId,a=e.target.closest(".message-item");if(!a)return;const r=s.UI.showLoading(a);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"delete_message",nonce:window.athleteDashboard.nonce,message_id:t})}),s=await e.json();s.success?(this.showMessage("Message deleted successfully!","success",a),await this.loadMessages()):this.showMessage(s.data?.message||"Error deleting message. Please try again.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Message deletion error:",e)}finally{s.UI.hideLoading(r)}}handleMessageReply(e){e.preventDefault();const t=e.target.closest(".message-item"),a=e.target.dataset.recipientId,s=t.querySelector(".message-subject")?.textContent||"",r=document.querySelector(".recipient-search");r&&(r.dataset.selectedId=a,r.value=t.querySelector(".message-sender")?.textContent||"");const n=document.getElementById("message-subject");n&&(n.value="Re: "+s.replace(/^Re: /,""));const o=document.getElementById("compose-message-form");o&&o.scrollIntoView({behavior:"smooth"})}async handleMessageClick(e){const t=e.target.closest(".message-item"),a=t.dataset.messageId;t.classList.contains("unread")&&await this.markMessageAsRead(a,t),await this.loadMessageContent(a)}async markMessageAsRead(e,t){try{const a=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"mark_message_read",nonce:window.athleteDashboard.nonce,message_id:e})});(await a.json()).success&&(t.classList.remove("unread"),this.updateUnreadCount(-1))}catch(e){console.error("Mark as read error:",e)}}async loadMessageContent(e){const t=document.getElementById("message-content-container");if(!t)return;const a=s.UI.showLoading(t);try{const a=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_message_content",nonce:window.athleteDashboard.nonce,message_id:e})}),s=await a.json();s.success?t.innerHTML=s.data.content:this.showMessage("Error loading message content. Please try again.","error",t)}catch(e){this.showMessage("Server error. Please try again later.","error",t),console.error("Message content loading error:",e)}finally{s.UI.hideLoading(a)}}updateMessagesList(e){const t=document.getElementById("messages-list");t&&(t.innerHTML=e.messages),this.updateUnreadCount(e.unread_count)}updateUnreadCount(e){document.querySelectorAll(".unread-count").forEach((t=>{t.textContent="number"==typeof e?parseInt(t.textContent||"0")+e:e}))}showMessage(e,t,a){const r=a.querySelector(".messaging-message")||s.UI.createElement("div","messaging-message");r.className=`messaging-message ${t}`,r.textContent=e,r.parentNode||a.insertBefore(r,a.firstChild),setTimeout((()=>{r.classList.add("fade-out"),setTimeout((()=>r.remove()),300)}),3e3)}async showNotification(e){if("Notification"in window)try{"granted"===await Notification.requestPermission()&&new Notification("Athlete Dashboard",{body:e,icon:"/path/to/notification-icon.png"})}catch(e){console.error("Notification error:",e)}}destroy(){this.pollingInterval&&clearInterval(this.pollingInterval)}};document.addEventListener("DOMContentLoaded",(()=>r.init()))},454:function(e,t,a){a.d(t,{UI:function(){return r}});class s{constructor(){this.initialized=!1}init(){this.initialized||(this.initializeComponents(),this.bindEvents(),this.initialized=!0)}initializeComponents(){this.initializeTabs(),this.initializeTooltips(),this.initializeModals()}bindEvents(){document.addEventListener("click",(e=>{e.target.matches(".athlete-dashboard-toggle")&&this.handleToggle(e),e.target.matches(".athlete-dashboard-modal-trigger")&&this.handleModalTrigger(e)}))}initializeTabs(){document.querySelectorAll(".athlete-dashboard-tabs").forEach((e=>{const t=e.querySelectorAll('[role="tab"]'),a=e.querySelectorAll('[role="tabpanel"]');t.forEach((s=>{s.addEventListener("click",(()=>{t.forEach((e=>e.setAttribute("aria-selected","false"))),a.forEach((e=>e.hidden=!0)),s.setAttribute("aria-selected","true");const r=e.querySelector(`#${s.getAttribute("aria-controls")}`);r&&(r.hidden=!1)}))})),t[0]&&t[0].click()}))}initializeTooltips(){document.querySelectorAll(".athlete-dashboard-tooltip").forEach((e=>{const t=e.getAttribute("data-tooltip");t&&(e.addEventListener("mouseenter",(a=>{const s=document.createElement("div");s.className="athlete-tooltip",s.textContent=t,document.body.appendChild(s);const r=e.getBoundingClientRect();s.style.left=`${r.right+5}px`,s.style.top=r.top+r.height/2-s.offsetHeight/2+"px"})),e.addEventListener("mouseleave",(()=>{document.querySelectorAll(".athlete-tooltip").forEach((e=>e.remove()))})))}))}initializeModals(){document.querySelectorAll(".athlete-dashboard-modal").forEach((e=>{const t=document.createElement("div");t.className="athlete-modal-backdrop",e.before(t);const a=document.createElement("button");a.className="athlete-modal-close",a.innerHTML="×",a.addEventListener("click",(()=>this.closeModal(e))),e.appendChild(a),this.closeModal(e)}))}handleToggle(e){e.preventDefault();const t=document.querySelector(e.target.dataset.target);if(t){const e="none"===t.style.display;t.style.display=e?"block":"none",t.style.height=e?`${t.scrollHeight}px`:"0"}}handleModalTrigger(e){e.preventDefault();const t=e.target.dataset.modal,a=document.getElementById(t);a&&this.openModal(a)}openModal(e){e.style.display="block",e.previousElementSibling?.classList.add("active"),document.body.style.overflow="hidden"}closeModal(e){e.style.display="none",e.previousElementSibling?.classList.remove("active"),document.body.style.overflow=""}static createElement(e,t,a=""){const s=document.createElement(e);return t&&(s.className=t),a&&(s.textContent=a),s}static showLoading(e){const t=s.createElement("div","athlete-loading");return e.appendChild(t),t}static hideLoading(e){e?.remove()}static showError(e,t){const a=s.createElement("div","athlete-error",e);t.appendChild(a),setTimeout((()=>a.remove()),5e3)}}const r=new s;document.addEventListener("DOMContentLoaded",(()=>r.init()))},441:function(e,t,a){a.d(t,{Q:function(){return r}});var s=a(454);const r=new class{constructor(){this.initialized=!1,this.exerciseList=window.athleteDashboard?.exerciseTests||[]}init(){this.initialized||(this.bindEvents(),this.initializeWorkoutForms(),this.initialized=!0)}bindEvents(){document.addEventListener("submit",(e=>{e.target.matches(".workout-form")&&this.handleWorkoutSubmit(e)})),document.addEventListener("click",(e=>{e.target.matches(".log-workout-btn")&&this.handleLogWorkout(e)}))}initializeWorkoutForms(){document.querySelectorAll(".workout-date").forEach((e=>{e.type="date",e.max=(new Date).toISOString().split("T")[0]})),this.initializeExerciseSelectors()}initializeExerciseSelectors(){document.querySelectorAll(".exercise-selector").forEach((e=>{const t=`exercise-list-${Math.random().toString(36).substr(2,9)}`,a=document.createElement("datalist");a.id=t,this.exerciseList.forEach((e=>{const t=document.createElement("option");t.value=e,a.appendChild(t)})),e.setAttribute("list",t),e.after(a)}))}async handleWorkoutSubmit(e){e.preventDefault();const t=e.target,a=new FormData(t),r=t.closest(".workout-container"),n=s.UI.showLoading(r);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"log_workout",nonce:window.athleteDashboard.nonce,workout_data:JSON.stringify(Object.fromEntries(a))})}),s=await e.json();s.success?(this.showMessage("Workout logged successfully!","success",r),t.reset()):this.showMessage(s.data?.message||"Error logging workout. Please try again.","error",r)}catch(e){this.showMessage("Server error. Please try again later.","error",r),console.error("Workout submission error:",e)}finally{s.UI.hideLoading(n)}}async handleLogWorkout(e){e.preventDefault();const t=e.target.dataset.workoutId,a=document.getElementById("workout-form-container");if(!a)return;const r=s.UI.showLoading(a);try{const e=await fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"get_workout_form",nonce:window.athleteDashboard.nonce,workout_id:t})}),s=await e.json();s.success?(a.innerHTML=s.data.form,this.initializeWorkoutForms()):this.showMessage(s.data?.message||"Error loading workout form.","error",a)}catch(e){this.showMessage("Server error. Please try again later.","error",a),console.error("Workout form load error:",e)}finally{s.UI.hideLoading(r)}}showMessage(e,t,a){const r=a.querySelector(".workout-message")||s.UI.createElement("div","workout-message");r.className=`workout-message ${t}`,r.textContent=e,r.parentNode||a.insertBefore(r,a.firstChild),setTimeout((()=>{r.classList.add("fade-out"),setTimeout((()=>r.remove()),300)}),3e3)}};document.addEventListener("DOMContentLoaded",(()=>r.init()))}},t={};function a(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,a),n.exports}a.d=function(e,t){for(var s in t)a.o(t,s)&&!a.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)};var s=a(454),r=a(441),n=a(274),o=a(63),i=a(660),d=a(778),c=a(449);const l=new class{constructor(){this.modules=new Map([["ui",s.UI],["workout",r.Q],["goals",n.n],["attendance",o.W],["membership",i.D],["messaging",d.T],["charts",c.G]]),this.initialized=!1}async init(){if(!this.initialized)try{await this.initializeModule("ui");const e=Array.from(this.modules.entries()).filter((([e])=>"ui"!==e)).map((([e,t])=>this.initializeModule(e)));await Promise.all(e),this.initialized=!0,console.log("Athlete Dashboard initialized successfully")}catch(e){console.error("Error initializing Athlete Dashboard:",e),this.handleInitializationError(e)}}async initializeModule(e){const t=this.modules.get(e);if(t)try{await t.init(),console.log(`Module ${e} initialized`)}catch(t){throw console.error(`Error initializing ${e} module:`,t),t}else console.warn(`Module ${e} not found`)}handleInitializationError(e){const t=document.querySelector(".athlete-dashboard-container");t&&s.UI.showError("Error initializing dashboard. Please refresh the page or contact support.",t);const a={message:e.message,stack:e.stack,timestamp:(new Date).toISOString(),url:window.location.href,userAgent:navigator.userAgent};fetch(window.athleteDashboard.ajax_url,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams({action:"log_dashboard_error",nonce:window.athleteDashboard.nonce,error:JSON.stringify(a)})}).catch((e=>console.error("Error logging dashboard error:",e)))}};"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>l.init())):l.init()}();